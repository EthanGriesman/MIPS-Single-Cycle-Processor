library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_textio.all;
use std.textio.all;

entity tb_fetch is
    -- Testbench doesn't require generics in this case
end tb_fetch;

architecture arch of tb_fetch is
    -- Constants for clock period, feel free to adjust as necessary
    constant gCLK_HPER: time := 50 ns;  -- Half period
    constant cCLK_PER: time := gCLK_HPER * 2;  -- Full clock period

    component fetch is
        port(
            iRST           : in std_logic;
            iRSTVAL        : in std_logic_vector(31 downto 0);
            iAddr          : in std_logic_vector(25 downto 0);
            iSignExtendImm : in std_logic_vector(31 downto 0);
            iBranch        : in std_logic;
            iALUZero       : in std_logic;
            iJump          : in std_logic_vector(1 downto 0);
            irs            : in std_logic_vector(31 downto 0);
            oPC            : out std_logic_vector(31 downto 0);
            oPCPlus4       : out std_logic_vector(31 downto 0)
        );
    end component;

    signal CLK: std_logic := '0';

    -- Signal declarations
    signal s_Rst           : std_logic := '0';
    signal s_RstVal        : std_logic_vector(31 downto 0) := (others => '0');
    signal s_Addr          : std_logic_vector(25 downto 0) := (others => '0');
    signal s_SignExtendImm : std_logic_vector(31 downto 0) := (others => '0');
    signal s_Branch        : std_logic := '0';
    signal s_ALUZero       : std_logic := '0';
    signal s_Jump          : std_logic_vector(1 downto 0) := (others => '0');
    signal s_irs           : std_logic_vector(31 downto 0) := (others => '0');
    signal s_PC            : std_logic_vector(31 downto 0);
    signal s_PCPlus4       : std_logic_vector(31 downto 0);

begin
    -- Instantiate the Unit Under Test (UUT)
    DUT0: fetch
        port map (
            iRST           => s_Rst,
            iRSTVAL        => s_RstVal,
            iAddr          => s_Addr,
            iSignExtendImm => s_SignExtendImm,
            iBranch        => s_Branch,
            iALUZero       => s_ALUZero,
            iJump          => s_Jump,
            irs            => s_irs,
            oPC            => s_PC,
            oPCPlus4       => s_PCPlus4
        );

    -- Clock process (if needed)
    P_CLK: process
     begin
         wait for gCLK_HPER;
         CLK <= not CLK;
         wait for gCLK_HPER;
         CLK <= not CLK;
     end process;

    -- Reset process
    P_RST: process
    begin
        s_Rst <= '1';
        wait for 100 ns;  -- Adjust the wait time as needed
        s_Rst <= '0';
        wait;
    end process;

P_TEST_CASES: process
begin
    -- Wait for the reset to be released
    wait for 150 ns;  -- Adjust the wait time to be after reset release

    -- Test Case 1: Sequential Execution (already included)
    s_RstVal        <= x"00000000";
    s_Addr          <= (others => '0');
    s_SignExtendImm <= "00000000000000000000000000000100";
    s_Branch        <= '0';
    s_ALUZero       <= '0';
    s_Jump          <= "00";
    wait for cCLK_PER;

    -- Test Case 2: Branch Taken
    s_Branch        <= '1';
    s_ALUZero       <= '1';  -- Branch condition met
    s_Jump          <= "00";  -- No jump
    s_SignExtendImm <= "00000000000000000000000000001000";  -- Branch offset
    wait for cCLK_PER;

    -- Test Case 3: Branch Not Taken
    s_Branch        <= '1';
    s_ALUZero       <= '0';  -- Branch condition not met
    s_Jump          <= "00";
    s_SignExtendImm <= "00000000000000000000000000001000";  -- Branch offset
    wait for cCLK_PER;

    -- Test Case 4: Jump
    s_Branch        <= '0';
    s_ALUZero       <= '0';  -- Not relevant for jump
    s_Jump          <= "01";  -- Jump instruction
    s_Addr <= "00000000000000000000000000"; -- Adjusted to match length 26
    wait for cCLK_PER;

    -- Test Case 5: Jump Register (JR)
    s_Branch        <= '0';
    s_ALUZero       <= '0';
    s_Jump          <= "10";  -- JR instruction
    s_irs           <= "00000000000000000000000000001010";  -- Register value to jump to
    wait for cCLK_PER;

    -- Add more test cases as needed...

    -- Finish the simulation
    wait;
end process;

end arch;